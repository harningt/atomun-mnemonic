import org.ajoberstar.gradle.git.release.opinion.Strategies

buildscript {
    dependencies {
        classpath "net.sf.proguard:proguard-gradle:5.3.3"
    }
}

plugins {
    id 'java'
    id 'groovy'
    id 'maven'
    id 'us.eharning.gradle.defaults' version '0.1.2'
}

group = 'us.eharning.atomun'
description = 'Utility library implementing mnemonic <-> bytes conversions.'
sourceCompatibility = 1.8

release {
    // Adds SNAPSHOT strategy to allowed list to be used by Travis-CI
    versionStrategy Strategies.SNAPSHOT
}

repositories {
    jcenter()
    mavenCentral()
    // maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'http://www.tomgibara.com/maven/repo/' }
}

dependencies {
    findbugs 'com.google.code.findbugs:findbugs:3.0.1'

    compile 'us.eharning.atomun:atomun-core:0.0.2'

    compile group: 'com.google.guava', name: 'guava', version: '19.0'
    compile 'com.google.code.findbugs:annotations:3.0.1'
    compile 'com.google.code.findbugs:jsr305:3.0.1'
    compile 'com.squareup.okio:okio:1.10.0'

    compile 'com.tomgibara.bits:bits:1.0.1'

    testCompile 'org.codehaus.groovy:groovy:2.4.7'
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    testCompile 'net.trajano.caliper:caliper:1.2.1'
    testCompile 'net.trajano.commons:commons-testing:2.1.0'
    testCompile 'org.yaml:snakeyaml:1.17'
    testCompile 'org.jooq:joor:0.9.6'
}

javadoc {
    options.tags "todo:a:TODO:"
}

task runBenchmark(type: JavaExec, dependsOn: test) {
    main = 'us.eharning.atomun.mnemonic.IndexGeneratorBenchmark'
    classpath = sourceSets.test.runtimeClasspath
}

apply from: "$rootDir/gradle/maven-publish.gradle"

wrapper {
    gradleVersion = '2.14.1'
}

/* Sanity check that the minimum class-set is from Java 7 */
task proguardCheck(type: proguard.gradle.ProGuardTask, dependsOn: assemble) {
    injars project.jar.archivePath
    //injars files(configurations.compile)
    libraryjars files(System.getenv("JAVA7_HOME") + "/jre/lib/rt.jar")
    libraryjars files(System.getenv("JAVA7_HOME") + "/jre/lib/jce.jar")
    libraryjars files(configurations.compile)
    // Don't really try to do anything, we just want this tool for it's bytecode lint
    dontshrink
    dontobfuscate
    dontoptimize
    // Don't fail if LambdaMetafactory is missing - it would be handled by Retrolambda
    dontwarn 'java.lang.invoke.LambdaMetafactory'
    // Don't note that these are duplicately imported, different test tools pull in
    dontnote 'javax.annotation.**'
    dontnote 'net.jcip.annotations.**'
}
